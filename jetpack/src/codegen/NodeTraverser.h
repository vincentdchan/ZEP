/* Generated by Ruby Script! */


#pragma once
#include "parser/SyntaxNodes.h"

namespace jetpack {


    class NodeTraverser {
    public:

        NodeTraverser() = default;

        void TraverseNode(SyntaxNode& node);

        virtual void Traverse(ArrayExpression& node) {}
        virtual void Traverse(ArrayPattern& node) {}
        virtual void Traverse(ArrowFunctionExpression& node) {}
        virtual void Traverse(AssignmentExpression& node) {}
        virtual void Traverse(AssignmentPattern& node) {}
        virtual void Traverse(AwaitExpression& node) {}
        virtual void Traverse(BinaryExpression& node) {}
        virtual void Traverse(BlockStatement& node) {}
        virtual void Traverse(BreakStatement& node) {}
        virtual void Traverse(CallExpression& node) {}
        virtual void Traverse(CatchClause& node) {}
        virtual void Traverse(ClassBody& node) {}
        virtual void Traverse(ClassDeclaration& node) {}
        virtual void Traverse(ClassExpression& node) {}
        virtual void Traverse(ConditionalExpression& node) {}
        virtual void Traverse(ContinueStatement& node) {}
        virtual void Traverse(DebuggerStatement& node) {}
        virtual void Traverse(Directive& node) {}
        virtual void Traverse(DoWhileStatement& node) {}
        virtual void Traverse(EmptyStatement& node) {}
        virtual void Traverse(ExportAllDeclaration& node) {}
        virtual void Traverse(ExportDefaultDeclaration& node) {}
        virtual void Traverse(ExportNamedDeclaration& node) {}
        virtual void Traverse(ExportSpecifier& node) {}
        virtual void Traverse(ExpressionStatement& node) {}
        virtual void Traverse(ForInStatement& node) {}
        virtual void Traverse(ForOfStatement& node) {}
        virtual void Traverse(ForStatement& node) {}
        virtual void Traverse(FunctionDeclaration& node) {}
        virtual void Traverse(FunctionExpression& node) {}
        virtual void Traverse(Identifier& node) {}
        virtual void Traverse(IfStatement& node) {}
        virtual void Traverse(Import& node) {}
        virtual void Traverse(ImportDeclaration& node) {}
        virtual void Traverse(ImportDefaultSpecifier& node) {}
        virtual void Traverse(ImportNamespaceSpecifier& node) {}
        virtual void Traverse(ImportSpecifier& node) {}
        virtual void Traverse(LabeledStatement& node) {}
        virtual void Traverse(Literal& node) {}
        virtual void Traverse(MetaProperty& node) {}
        virtual void Traverse(MethodDefinition& node) {}
        virtual void Traverse(Module& node) {}
        virtual void Traverse(NewExpression& node) {}
        virtual void Traverse(ObjectExpression& node) {}
        virtual void Traverse(ObjectPattern& node) {}
        virtual void Traverse(Property& node) {}
        virtual void Traverse(RegexLiteral& node) {}
        virtual void Traverse(RestElement& node) {}
        virtual void Traverse(ReturnStatement& node) {}
        virtual void Traverse(Script& node) {}
        virtual void Traverse(SequenceExpression& node) {}
        virtual void Traverse(SpreadElement& node) {}
        virtual void Traverse(MemberExpression& node) {}
        virtual void Traverse(Super& node) {}
        virtual void Traverse(SwitchCase& node) {}
        virtual void Traverse(SwitchStatement& node) {}
        virtual void Traverse(TaggedTemplateExpression& node) {}
        virtual void Traverse(TemplateElement& node) {}
        virtual void Traverse(TemplateLiteral& node) {}
        virtual void Traverse(ThisExpression& node) {}
        virtual void Traverse(ThrowStatement& node) {}
        virtual void Traverse(TryStatement& node) {}
        virtual void Traverse(UnaryExpression& node) {}
        virtual void Traverse(UpdateExpression& node) {}
        virtual void Traverse(VariableDeclaration& node) {}
        virtual void Traverse(VariableDeclarator& node) {}
        virtual void Traverse(WhileStatement& node) {}
        virtual void Traverse(WithStatement& node) {}
        virtual void Traverse(YieldExpression& node) {}
        virtual void Traverse(ArrowParameterPlaceHolder& node) {}
        virtual void Traverse(JSXClosingElement& node) {}
        virtual void Traverse(JSXElement& node) {}
        virtual void Traverse(JSXEmptyExpression& node) {}
        virtual void Traverse(JSXExpressionContainer& node) {}
        virtual void Traverse(JSXIdentifier& node) {}
        virtual void Traverse(JSXMemberExpression& node) {}
        virtual void Traverse(JSXAttribute& node) {}
        virtual void Traverse(JSXNamespacedName& node) {}
        virtual void Traverse(JSXOpeningElement& node) {}
        virtual void Traverse(JSXSpreadAttribute& node) {}
        virtual void Traverse(JSXText& node) {}
        virtual void Traverse(TSParameterProperty& node) {}
        virtual void Traverse(TSDeclareFunction& node) {}
        virtual void Traverse(TSDeclareMethod& node) {}
        virtual void Traverse(TSQualifiedName& node) {}
        virtual void Traverse(TSCallSignatureDeclaration& node) {}
        virtual void Traverse(TSConstructSignatureDeclaration& node) {}
        virtual void Traverse(TSPropertySignature& node) {}
        virtual void Traverse(TSMethodSignature& node) {}
        virtual void Traverse(TSIndexSignature& node) {}
        virtual void Traverse(TSAnyKeyword& node) {}
        virtual void Traverse(TSBooleanKeyword& node) {}
        virtual void Traverse(TSBigIntKeyword& node) {}
        virtual void Traverse(TSNeverKeyword& node) {}
        virtual void Traverse(TSNullKeyword& node) {}
        virtual void Traverse(TSNumberKeyword& node) {}
        virtual void Traverse(TSObjectKeyword& node) {}
        virtual void Traverse(TSStringKeyword& node) {}
        virtual void Traverse(TSSymbolKeyword& node) {}
        virtual void Traverse(TSUndefinedKeyword& node) {}
        virtual void Traverse(TSUnknownKeyword& node) {}
        virtual void Traverse(TSVoidKeyword& node) {}
        virtual void Traverse(TSThisType& node) {}
        virtual void Traverse(TSFunctionType& node) {}
        virtual void Traverse(TSConstructorType& node) {}
        virtual void Traverse(TSTypeReference& node) {}
        virtual void Traverse(TSTypePredicate& node) {}
        virtual void Traverse(TSTypeQuery& node) {}
        virtual void Traverse(TSTypeLiteral& node) {}
        virtual void Traverse(TSArrayType& node) {}
        virtual void Traverse(TSTupleType& node) {}
        virtual void Traverse(TSOptionalType& node) {}
        virtual void Traverse(TSRestType& node) {}
        virtual void Traverse(TSUnionType& node) {}
        virtual void Traverse(TSIntersectionType& node) {}
        virtual void Traverse(TSConditionalType& node) {}
        virtual void Traverse(TSInferType& node) {}
        virtual void Traverse(TSParenthesizedType& node) {}
        virtual void Traverse(TSTypeOperator& node) {}
        virtual void Traverse(TSIndexedAccessType& node) {}
        virtual void Traverse(TSMappedType& node) {}
        virtual void Traverse(TSLiteralType& node) {}
        virtual void Traverse(TSExpressionWithTypeArguments& node) {}
        virtual void Traverse(TSInterfaceDeclaration& node) {}
        virtual void Traverse(TSInterfaceBody& node) {}
        virtual void Traverse(TSTypeAliasDeclaration& node) {}
        virtual void Traverse(TSAsExpression& node) {}
        virtual void Traverse(TSTypeAssertion& node) {}
        virtual void Traverse(TSEnumDeclaration& node) {}
        virtual void Traverse(TSEnumMember& node) {}
        virtual void Traverse(TSModuleDeclaration& node) {}
        virtual void Traverse(TSModuleBlock& node) {}
        virtual void Traverse(TSImportType& node) {}
        virtual void Traverse(TSImportEqualsDeclaration& node) {}
        virtual void Traverse(TSExternalModuleReference& node) {}
        virtual void Traverse(TSNonNullExpression& node) {}
        virtual void Traverse(TSExportAssignment& node) {}
        virtual void Traverse(TSNamespaceExportDeclaration& node) {}
        virtual void Traverse(TSTypeAnnotation& node) {}
        virtual void Traverse(TSTypeParameterInstantiation& node) {}
        virtual void Traverse(TSTypeParameterDeclaration& node) {}
        virtual void Traverse(TSTypeParameter& node) {}

        virtual ~NodeTraverser() = default;

    };

}

