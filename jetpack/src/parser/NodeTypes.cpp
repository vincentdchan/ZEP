/* Generated by Ruby Script! */

#include "NodeTypes.h"

namespace jetpack {

    const char* SyntaxNodeTypeToString(SyntaxNodeType type_) {
        switch (type_) {

            case SyntaxNodeType::ArrayExpression:
                return "ArrayExpression";

            case SyntaxNodeType::ArrayPattern:
                return "ArrayPattern";

            case SyntaxNodeType::ArrowFunctionExpression:
                return "ArrowFunctionExpression";

            case SyntaxNodeType::AssignmentExpression:
                return "AssignmentExpression";

            case SyntaxNodeType::AssignmentPattern:
                return "AssignmentPattern";

            case SyntaxNodeType::AwaitExpression:
                return "AwaitExpression";

            case SyntaxNodeType::BinaryExpression:
                return "BinaryExpression";

            case SyntaxNodeType::BlockStatement:
                return "BlockStatement";

            case SyntaxNodeType::BreakStatement:
                return "BreakStatement";

            case SyntaxNodeType::CallExpression:
                return "CallExpression";

            case SyntaxNodeType::CatchClause:
                return "CatchClause";

            case SyntaxNodeType::ClassBody:
                return "ClassBody";

            case SyntaxNodeType::ClassDeclaration:
                return "ClassDeclaration";

            case SyntaxNodeType::ClassExpression:
                return "ClassExpression";

            case SyntaxNodeType::ConditionalExpression:
                return "ConditionalExpression";

            case SyntaxNodeType::ContinueStatement:
                return "ContinueStatement";

            case SyntaxNodeType::DebuggerStatement:
                return "DebuggerStatement";

            case SyntaxNodeType::Directive:
                return "Directive";

            case SyntaxNodeType::DoWhileStatement:
                return "DoWhileStatement";

            case SyntaxNodeType::EmptyStatement:
                return "EmptyStatement";

            case SyntaxNodeType::ExportAllDeclaration:
                return "ExportAllDeclaration";

            case SyntaxNodeType::ExportDefaultDeclaration:
                return "ExportDefaultDeclaration";

            case SyntaxNodeType::ExportNamedDeclaration:
                return "ExportNamedDeclaration";

            case SyntaxNodeType::ExportSpecifier:
                return "ExportSpecifier";

            case SyntaxNodeType::ExpressionStatement:
                return "ExpressionStatement";

            case SyntaxNodeType::ForInStatement:
                return "ForInStatement";

            case SyntaxNodeType::ForOfStatement:
                return "ForOfStatement";

            case SyntaxNodeType::ForStatement:
                return "ForStatement";

            case SyntaxNodeType::FunctionDeclaration:
                return "FunctionDeclaration";

            case SyntaxNodeType::FunctionExpression:
                return "FunctionExpression";

            case SyntaxNodeType::Identifier:
                return "Identifier";

            case SyntaxNodeType::IfStatement:
                return "IfStatement";

            case SyntaxNodeType::Import:
                return "Import";

            case SyntaxNodeType::ImportDeclaration:
                return "ImportDeclaration";

            case SyntaxNodeType::ImportDefaultSpecifier:
                return "ImportDefaultSpecifier";

            case SyntaxNodeType::ImportNamespaceSpecifier:
                return "ImportNamespaceSpecifier";

            case SyntaxNodeType::ImportSpecifier:
                return "ImportSpecifier";

            case SyntaxNodeType::LabeledStatement:
                return "LabeledStatement";

            case SyntaxNodeType::Literal:
                return "Literal";

            case SyntaxNodeType::MetaProperty:
                return "MetaProperty";

            case SyntaxNodeType::MethodDefinition:
                return "MethodDefinition";

            case SyntaxNodeType::Module:
                return "Module";

            case SyntaxNodeType::NewExpression:
                return "NewExpression";

            case SyntaxNodeType::ObjectExpression:
                return "ObjectExpression";

            case SyntaxNodeType::ObjectPattern:
                return "ObjectPattern";

            case SyntaxNodeType::Property:
                return "Property";

            case SyntaxNodeType::RegexLiteral:
                return "RegexLiteral";

            case SyntaxNodeType::RestElement:
                return "RestElement";

            case SyntaxNodeType::ReturnStatement:
                return "ReturnStatement";

            case SyntaxNodeType::Script:
                return "Script";

            case SyntaxNodeType::SequenceExpression:
                return "SequenceExpression";

            case SyntaxNodeType::SpreadElement:
                return "SpreadElement";

            case SyntaxNodeType::MemberExpression:
                return "MemberExpression";

            case SyntaxNodeType::Super:
                return "Super";

            case SyntaxNodeType::SwitchCase:
                return "SwitchCase";

            case SyntaxNodeType::SwitchStatement:
                return "SwitchStatement";

            case SyntaxNodeType::TaggedTemplateExpression:
                return "TaggedTemplateExpression";

            case SyntaxNodeType::TemplateElement:
                return "TemplateElement";

            case SyntaxNodeType::TemplateLiteral:
                return "TemplateLiteral";

            case SyntaxNodeType::ThisExpression:
                return "ThisExpression";

            case SyntaxNodeType::ThrowStatement:
                return "ThrowStatement";

            case SyntaxNodeType::TryStatement:
                return "TryStatement";

            case SyntaxNodeType::UnaryExpression:
                return "UnaryExpression";

            case SyntaxNodeType::UpdateExpression:
                return "UpdateExpression";

            case SyntaxNodeType::VariableDeclaration:
                return "VariableDeclaration";

            case SyntaxNodeType::VariableDeclarator:
                return "VariableDeclarator";

            case SyntaxNodeType::WhileStatement:
                return "WhileStatement";

            case SyntaxNodeType::WithStatement:
                return "WithStatement";

            case SyntaxNodeType::YieldExpression:
                return "YieldExpression";

            case SyntaxNodeType::ArrowParameterPlaceHolder:
                return "ArrowParameterPlaceHolder";

            case SyntaxNodeType::JSXClosingElement:
                return "JSXClosingElement";

            case SyntaxNodeType::JSXElement:
                return "JSXElement";

            case SyntaxNodeType::JSXEmptyExpression:
                return "JSXEmptyExpression";

            case SyntaxNodeType::JSXExpressionContainer:
                return "JSXExpressionContainer";

            case SyntaxNodeType::JSXIdentifier:
                return "JSXIdentifier";

            case SyntaxNodeType::JSXMemberExpression:
                return "JSXMemberExpression";

            case SyntaxNodeType::JSXAttribute:
                return "JSXAttribute";

            case SyntaxNodeType::JSXNamespacedName:
                return "JSXNamespacedName";

            case SyntaxNodeType::JSXOpeningElement:
                return "JSXOpeningElement";

            case SyntaxNodeType::JSXSpreadAttribute:
                return "JSXSpreadAttribute";

            case SyntaxNodeType::JSXText:
                return "JSXText";

            case SyntaxNodeType::TSParameterProperty:
                return "TSParameterProperty";

            case SyntaxNodeType::TSDeclareFunction:
                return "TSDeclareFunction";

            case SyntaxNodeType::TSDeclareMethod:
                return "TSDeclareMethod";

            case SyntaxNodeType::TSQualifiedName:
                return "TSQualifiedName";

            case SyntaxNodeType::TSCallSignatureDeclaration:
                return "TSCallSignatureDeclaration";

            case SyntaxNodeType::TSConstructSignatureDeclaration:
                return "TSConstructSignatureDeclaration";

            case SyntaxNodeType::TSPropertySignature:
                return "TSPropertySignature";

            case SyntaxNodeType::TSMethodSignature:
                return "TSMethodSignature";

            case SyntaxNodeType::TSIndexSignature:
                return "TSIndexSignature";

            case SyntaxNodeType::TSAnyKeyword:
                return "TSAnyKeyword";

            case SyntaxNodeType::TSBooleanKeyword:
                return "TSBooleanKeyword";

            case SyntaxNodeType::TSBigIntKeyword:
                return "TSBigIntKeyword";

            case SyntaxNodeType::TSNeverKeyword:
                return "TSNeverKeyword";

            case SyntaxNodeType::TSNullKeyword:
                return "TSNullKeyword";

            case SyntaxNodeType::TSNumberKeyword:
                return "TSNumberKeyword";

            case SyntaxNodeType::TSObjectKeyword:
                return "TSObjectKeyword";

            case SyntaxNodeType::TSStringKeyword:
                return "TSStringKeyword";

            case SyntaxNodeType::TSSymbolKeyword:
                return "TSSymbolKeyword";

            case SyntaxNodeType::TSUndefinedKeyword:
                return "TSUndefinedKeyword";

            case SyntaxNodeType::TSUnknownKeyword:
                return "TSUnknownKeyword";

            case SyntaxNodeType::TSVoidKeyword:
                return "TSVoidKeyword";

            case SyntaxNodeType::TSThisType:
                return "TSThisType";

            case SyntaxNodeType::TSFunctionType:
                return "TSFunctionType";

            case SyntaxNodeType::TSConstructorType:
                return "TSConstructorType";

            case SyntaxNodeType::TSTypeReference:
                return "TSTypeReference";

            case SyntaxNodeType::TSTypePredicate:
                return "TSTypePredicate";

            case SyntaxNodeType::TSTypeQuery:
                return "TSTypeQuery";

            case SyntaxNodeType::TSTypeLiteral:
                return "TSTypeLiteral";

            case SyntaxNodeType::TSArrayType:
                return "TSArrayType";

            case SyntaxNodeType::TSTupleType:
                return "TSTupleType";

            case SyntaxNodeType::TSOptionalType:
                return "TSOptionalType";

            case SyntaxNodeType::TSRestType:
                return "TSRestType";

            case SyntaxNodeType::TSUnionType:
                return "TSUnionType";

            case SyntaxNodeType::TSIntersectionType:
                return "TSIntersectionType";

            case SyntaxNodeType::TSConditionalType:
                return "TSConditionalType";

            case SyntaxNodeType::TSInferType:
                return "TSInferType";

            case SyntaxNodeType::TSParenthesizedType:
                return "TSParenthesizedType";

            case SyntaxNodeType::TSTypeOperator:
                return "TSTypeOperator";

            case SyntaxNodeType::TSIndexedAccessType:
                return "TSIndexedAccessType";

            case SyntaxNodeType::TSMappedType:
                return "TSMappedType";

            case SyntaxNodeType::TSLiteralType:
                return "TSLiteralType";

            case SyntaxNodeType::TSExpressionWithTypeArguments:
                return "TSExpressionWithTypeArguments";

            case SyntaxNodeType::TSInterfaceDeclaration:
                return "TSInterfaceDeclaration";

            case SyntaxNodeType::TSInterfaceBody:
                return "TSInterfaceBody";

            case SyntaxNodeType::TSTypeAliasDeclaration:
                return "TSTypeAliasDeclaration";

            case SyntaxNodeType::TSAsExpression:
                return "TSAsExpression";

            case SyntaxNodeType::TSTypeAssertion:
                return "TSTypeAssertion";

            case SyntaxNodeType::TSEnumDeclaration:
                return "TSEnumDeclaration";

            case SyntaxNodeType::TSEnumMember:
                return "TSEnumMember";

            case SyntaxNodeType::TSModuleDeclaration:
                return "TSModuleDeclaration";

            case SyntaxNodeType::TSModuleBlock:
                return "TSModuleBlock";

            case SyntaxNodeType::TSImportType:
                return "TSImportType";

            case SyntaxNodeType::TSImportEqualsDeclaration:
                return "TSImportEqualsDeclaration";

            case SyntaxNodeType::TSExternalModuleReference:
                return "TSExternalModuleReference";

            case SyntaxNodeType::TSNonNullExpression:
                return "TSNonNullExpression";

            case SyntaxNodeType::TSExportAssignment:
                return "TSExportAssignment";

            case SyntaxNodeType::TSNamespaceExportDeclaration:
                return "TSNamespaceExportDeclaration";

            case SyntaxNodeType::TSTypeAnnotation:
                return "TSTypeAnnotation";

            case SyntaxNodeType::TSTypeParameterInstantiation:
                return "TSTypeParameterInstantiation";

            case SyntaxNodeType::TSTypeParameterDeclaration:
                return "TSTypeParameterDeclaration";

            case SyntaxNodeType::TSTypeParameter:
                return "TSTypeParameter";

            default:
                return "<Invalid>";

        }
    }

}

